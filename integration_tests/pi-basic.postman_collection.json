{
	"info": {
		"_postman_id": "3681c593-45cc-46ba-a5da-533da81e6de3",
		"name": "pi-basic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ASE HTTP Health GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7d3e43a-a0c4-487e-8bd8-3fc4bf128ca5",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is not JSON\", function(){",
							"    pm.response.to.not.be.json;",
							"});",
							"",
							"pm.test(\"Body content is OK\",function(){",
							"    pm.expect(responseBody).to.equal(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP Health POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b06eb4dc-badc-4c27-a6fe-c4124cc816ef",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP Health PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b20be3f-92b4-4407-a3fd-d8d0205c332b",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP Health PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de046a01-23fa-43f8-a922-f4690033d9b7",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP Health OPTIONS",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b5ebd27-019e-4d90-857d-343abe76acdc",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP Health HEAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb546fc5-7f7f-43c1-b0aa-089291132d0c",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP Health DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8bac9a70-db0a-4f3b-9213-9e796b7ae6c4",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/ase",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbd57193-f320-46e3-a444-bcb206856bde",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is not JSON\", function(){",
							"    pm.response.to.not.be.json;",
							"});",
							"",
							"pm.test(\"Body content is OK\",function(){",
							"    pm.expect(responseBody).to.equal(\"OK\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the Health Check service woorks over the HTTPS listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e60afd3-a762-46f6-a7ca-70d4a0de1399",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health PUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "073ec5f3-a7f6-4360-8f54-2a7da32c58da",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "990f4330-e446-4003-bf94-cc33a166afd5",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health OPTIONS",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e77d6605-e87c-43db-a252-20becf91f9ae",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health HEAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5ec826c-1d34-4fdc-ba6c-5b3eb8d93b58",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "ASE HTTP/S Health DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1026f46-3084-40de-a1e3-c66abf1dd88a",
						"exec": [
							"pm.test(\"response is Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/ase",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"ase"
					]
				},
				"description": "Validate that the ASE Health Check service works over the HTTP listener"
			},
			"response": []
		},
		{
			"name": "HTTP GET to HTTPBIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87f2f824-9de2-4acb-8ad9-9b521163c4fa",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b0abe2bc-f9c4-474b-b072-ca9838eaa414",
						"exec": [
							"setTimeout(function(){}, 10000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{httpbin_host}}:{{httpbin_port}}/anything",
					"protocol": "http",
					"host": [
						"{{httpbin_host}}"
					],
					"port": "{{httpbin_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Confirm that request dierctly aimed at the back-end echo service work as expected"
			},
			"response": []
		},
		{
			"name": "HTTP POST to HTTPBIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0c5798a-ba93-4ec6-bc8b-eadf09200f07",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{httpbin_host}}:{{httpbin_port}}/anything",
					"protocol": "http",
					"host": [
						"{{httpbin_host}}"
					],
					"port": "{{httpbin_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Confirm that request dierctly aimed at the back-end echo service work as expected"
			},
			"response": []
		},
		{
			"name": "HTTP GET through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74e6e93e-3d6a-4cc2-b8c5-edffc04ba78f",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is GET\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"GET\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP POST through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d10f165-37e2-4e0b-bab7-ab5c85ae635f",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is POST\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"POST\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP PUT through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28727731-19c1-482c-a18c-21f3304a4dad",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is PUT\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"PUT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP PATCH through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aecca35e-cac1-402a-9c05-26a4938900cd",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is PATCH\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"PATCH\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP OPTIONS through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aad99fe9-42d9-476d-9997-37f6c3f0c98e",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP HEAD through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cdf97fb8-314f-4a98-a039-6084bab64922",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP DELETE through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9b1159e-465c-4eba-9b2d-6bf0eec267c2",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is DELETE\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"DELETE\");",
							"});",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is DELETE\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"DELETE\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "http://{{pi_host}}:{{pi_http_port}}/anything",
					"protocol": "http",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_http_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S GET through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98a703d5-60a9-4516-9ff0-24b184636116",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is GET\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"GET\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S POST through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17852059-b27e-4a43-8e48-8cb72473c74a",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is POST\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"POST\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S PUT through ASE Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "acc3acd2-ac80-4707-8319-b287062b578f",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is PUT\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"PUT\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S PATCH through ASE Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6d4202d-6c70-4f4f-b0f0-b6b540b41210",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is PATCH\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"PATCH\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S OPTIONS through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fda92b0d-9946-44cb-a64b-9b20c05410c1",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "OPTIONS",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S HEAD through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "538f185a-25a7-482b-9b69-cd135a646e79",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		},
		{
			"name": "HTTP/S DELETE through ASE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aefb1f3a-c796-4802-b03e-26f259b2b01b",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"json data is not empty\",function(){",
							"    pm.expect(jsonData).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"headers are present\",function(){",
							"    pm.expect(jsonData[\"headers\"]).to.exist;",
							"});",
							"pm.test(\"Something header are present\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.exist;",
							"});",
							"pm.test(\"Something header value is Ok\",function(){",
							"    pm.expect(jsonData[\"headers\"][\"Something\"]).to.equal(\"or-other\");",
							"});",
							"",
							"pm.test(\"method is present\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.exist;",
							"});",
							"pm.test(\"method is DELETE\",function(){",
							"    pm.expect(jsonData[\"method\"]).to.equal(\"DELETE\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Something",
						"type": "text",
						"value": "or-other"
					}
				],
				"url": {
					"raw": "https://{{pi_host}}:{{pi_https_port}}/anything",
					"protocol": "https",
					"host": [
						"{{pi_host}}"
					],
					"port": "{{pi_https_port}}",
					"path": [
						"anything"
					]
				},
				"description": "Issue the same GET as made against the echo service but through the ASE to confirm the inline proxy capabilities function as expected over the HTTP Listener"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b951d110-cafd-47af-bf0f-cb1778a38c64",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3281230e-7c92-44f8-a52f-20e36ffd6285",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0ff56831-ea95-4274-bf4e-deb7d142cf51",
			"key": "httpbin_host",
			"value": "httpbin"
		},
		{
			"id": "500f67b6-1b94-4d7f-9f1f-6e656fdda415",
			"key": "httpbin_port",
			"value": "80"
		},
		{
			"id": "6da525d6-0459-4651-b7be-86fcb7b60b07",
			"key": "pi_host",
			"value": "pingintelligence"
		},
		{
			"id": "64164a25-5841-4d42-97f5-62b50617aefc",
			"key": "pi_http_port",
			"value": "8000"
		},
		{
			"id": "bee40889-7ddd-4624-b87d-1c96fb957a41",
			"key": "pi_https_port",
			"value": "8443"
		}
	],
	"protocolProfileBehavior": {}
}